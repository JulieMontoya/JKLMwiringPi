#!/usr/bin/perl -w
use strict;

use JKLMwiringPi qw/setup pin_mode ms_delay digital_read digital_write/;

#  knightrider:  Produces a "Knight Rider" style display with 8 LEDS connected
#                to GPIO pins 0-7.
#                Stops when GPIO pin 8 goes low.

my ($pin, $state, $wait, $button);

#  Each element is an array reference constructor:
#  [ pin to affect, state to set it to, milliseconds to wait ]
my @seq = ([0, 1, 75], [1, 1, 75], [2, 1, 0],  [0, 0, 75],  [3, 1, 0], [1, 0, 75],
           [4, 1, 0],  [2, 0, 75], [5, 1, 0],  [3, 0, 75],  [6, 1, 0], [4, 0, 75],
           [7, 1, 0],  [5, 0, 75], [6, 0, 75], [7, 0, 225],
           [7, 1, 75], [6, 1, 75], [5, 1, 0],  [7, 0, 75],  [4, 1, 0], [6, 0, 75],
           [3, 1, 0],  [5, 0, 75], [2, 1, 0],  [4, 0, 75],  [1, 1, 0], [3, 0, 75],
           [0, 1, 0],  [2, 0, 75], [1, 0, 75], [0, 0, 225]);
           
#  What we do is turn on the first two LEDs, with a wait between them; then,
#  turn the first off with no wait and the third with a wait, second off with
#  no wait and fourth on with a wait, and so on; so at any time, only at most
#  two LEDs are ever lit.  Then reverse direction and do it all again.

#  Initialise GPIO
my $gpio = JKLMwiringPi->setup;
die "Something wrong with JKLMwiringPi->setup"                  unless $gpio;

$gpio->pin_mode(0 => "out", 1 => "out", 2 => "out", 3 => "out", 4 => "out",
                5 => "out", 6 => "out", 7 => "out", 8 => "in");

#  Main loop:  Keep going around as long as button is unpressed  (due to wiring,
#  button shows 0 when pressed)

while ($button =$gpio->digital_read(8)) {
    push @seq, $_ = shift @seq;
    ($pin, $state, $wait) = @$_;
    $gpio->digital_write($pin, $state)->ms_delay($wait);
};

#  Tidy up after ourselves, leaving all outputs off

$gpio->digital_write(0 => "off", 1 => "off", 2 => "off", 3 => "off",
                     4 => "off", 5 => "off", 6 => "off", 7 => "off");

exit 0;
